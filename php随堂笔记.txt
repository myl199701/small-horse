
ftp:192.168.8.224
	chy/123456

@指令分隔符
*****B/S架构
	依托浏览器的网络系统
*****C/S架构
	依托软件的系统
	
可以理解为：标点符号，将一个功能/语句做一个单元来处理，分隔不同的语句。
	注意：php中一般不能省且为英文分号。最后一个分隔符可以省略，最好不省略。
@注释：
	对代码解释说明,不会被执行。
	类型：单行——//或者#（推荐//）
	          多行——/*--------*/变量
11.23
@变量：
    注意事项：1>声明$是标志。
             %    2>变量区分大小写。
	    3>变量名不能有空格。
             %    4>变量名称必须以字母或者下划线开头。
             %    5>不能出现特殊字符（运算符）   
                    6>某些系统变量（$this、$for）重名
    声明数组变量时：var a=array("我","的","天","哪")
    附加：一个汉字是3个字符（String）

@结构语言：(输出变量)
1>echo、echo()——字符串类型输出方式，只能输出标量（包括一个值）
2>var_dump()——输出任意变量的值和类型或其他信息,也可同时输出多个变量值（字符串长度----常用）
3>print_r()——结构比较清晰，便于辨认。也可输出所有类型变量；如果是结构复杂的可以打出结构；如果是普通的，只打出值且只允许输出一个值。

****区别------用于输出使用echo；用于程序调试只能用var_dump()和print_r()---常用于数组方面

@检测变量是否被使用过：
isset(变量)——检测结果要用变量存储并打印出来，可同时检测多个，配合 var_dump（）查看变量类型，返回false或0为不存在；true或1为存在。1或者true会自己辨别环境显示。

@删除变量：
unset（变量）——不会返回数据值，删除后变量检测为false。

标准量值与复合量值：
	标准量只能存放一个值的变量
	复合量能存放多个值的变量

标量类型：
	标量，复合量，资源型，其他类型 ----->数据类型
	数值类型：整形，浮点型
	布尔型（真假）

***字符串：
	类型:@1--' '--单引号不能解析变量。
	        @2--"  "--双引号可以解析变量，如变量后面有内容，需要与变量分开，可用非能定义变量的符号分隔开；例如——空格、运算符
		实例：1、$bb='天啊'；$a="abc$bb 123"或者$a="abc$a+123"
	        @3--{ }--大括号也可以解析变量，前提是括号中有变量的情况下，但是，多个大括号包涵着变量，则离变量最近的大括号解析变量且只解析一次，其他的外部括号则作为内容显示。
		实例：1、$bb='天哪'；$a="abc{$bb}123";则输出“abc天哪123”字样
		          2、$bb='天哪'；$a="abc{{$bb}}123";则输出“abc{天哪}123”字样

***输出字符串中某一个数据（字符串的截取）：
	1、运用数组-----$a="hello city";var_dump($a[位数]或者$a{位数}--数组样式)；
	2、String函数-----格式：输出函数 substr(string,start,length)------用于返回字串
		/*    start----正数 - 在字符串的指定位置开始（位数）----空格也算位数
			负数 - 在从字符串结尾开始的指定位置开始（不是位数）
			0 - 在字符串中的第一个字符处开始
	                       length--长度--正数 - 从 start 参数所在的位置返回的长度
			       负数 - 从字符串末端返回的长度
                              */
	3、获取字符串（针对汉字）在不通编码情况下的 编码长度------echo strlen($a);
！！！双引号解析变量但速度相对与单引号较低一点

***换行标签：
1、代码中换行---\n或者\r\n;
2、浏览器中换行---<br/>------echo  '<br/>';

PHP数据类型转换-------字符转数字,数字转字符
PHP的数据类型转换属于强制转换，允许转换的PHP数据类型有：

（int）、（integer）：转换成整形
（float）、（double）、（real）：转换成浮点型
（string）：转换成字符串
（bool）、（boolean）：转换成布尔类型
（array）：转换成数组
（object）：转换成对象
PHP数据类型有三种转换方式：

在要转换的变量之前加上用括号括起来的目标类型
使用3个具体类型的转换函数，intval()、floatval()、strval()   【记忆：想转换的目的类型+val()】
使用通用类型转换函数settype(mixed var,string type)

 第一种转换方式： (int)  (bool)  (float)  (string)  (array) (object)
<?php   
$num1=3.14;   
$num2=(int)$num1;   
var_dump($num1); //输出float(3.14)   
var_dump($num2); //输出int(3)   
?>  

第二种转换方式：  intval()  floatval()  strval()
<?php   
$str="123.9abc";   
$int=intval($str);     //转换后数值：123   
$float=floatval($str); //转换后数值：123.9   
$str=strval($float);   //转换后字符串："123.9"    
?>  

第三种转换方式：  settype();

 
<?php   
$num4=12.8;   
$flg=settype($num4,"int");   
var_dump($flg);  //输出bool(true)   
var_dump($num4); //输出int(12)   
?> 

			@注意事项：0/空值       转换成bool时，输出是flase；-1则是true；常量不会转换

***类型测试：
	语法：bool is_string ( mixed $var )-----var_dump(is_bool(变量))
	          /*bool--指输出函数（echo/var_dump/print_r等）；
		is_string()--指检测类型（is_string/is_bool/is_array/is_numeric等）；
		mixed--指变量的类型可能是复合型，可省略
		*/

***查看apache和php版本
	1、输入函数：phpinfo（）；		2、在phpinfo.php文件内查看版本。

11.26
***php运算符
	1、算术运算符---%值--去余数（可能的值--0~【被除数-1】）
	2、并置----连接两个字符串---例：$a='hei';$b='hehe';var_dump($a.$b)--输出为heihehe
		注意：@1、双引号可以作为隐形的字串拼接运算。
		          @2、如果是非字串类型，将自动转化成字串--$a="heheh";$b=123;echo($a.$b)--输出为heheh123
		          @3、“，”字符只能出现在echo中做字符串拼接（输出型）
		          @4、“.=”--拼接字符串--$a='a';$a.=",bc";echo $a;---输出为a,bc。

***补充转化内容------@1、字符串转数值规则：
		——字串中如果有出现字母，则转化过程中数值之后的字符及之后的内容统统省略掉，不会输出；如字串开始有字符，则该变量转化后为0；bool值为flase。             例：var_dump(123=="123abc123");输出bool为true。

		@2、比较运算时规则：
		——基准--以左边值为基准，右边值按左边类型转化。          例：var_dump(0=="abc");bool=true;
			特例：1、数值型字串（只含有数值）在比较时，是作为数值来比较的。
			           2、任何类型与布尔值比较时，统一转化成布尔值进行比较。

***递增、递减运算：
	规则：符号在前，先运算，后输出；符号在后，先输出，后运算。 

***三元运算符：
	1、----5>3 ? 'ok’: 'err'-----如果5>3,则输出；反则err
	2、----5>10 ? 'ok'  :(5>3 ? 'ok' : 'err')----可以多个条件合并

11.27
***php中的时间对象
	语法：输出函数  date(format,timestamp);
	/*  format---必需。规定输出日期字符串的格式。可用以下字符：
		*     d---一个月的第几天（从01到31）；
		      D---星期几的 文本表示（英文的前三个字母）；
		       l---星期几的完整文本表示（英文）；
		*      j---一个月中的第几天，不带前导0（1~31）；
		      N---星期几的数字格式（7表示星期日）；
		*     w---星期几的数字表示（0表示星期日，6表示星期六）
		*     z---一年中的第几天；
		       L---是否是闰年（是则1）
		       Y---年份的四位数表示
		       y---年份的两位数表示
		       a/M---am或pm/AM或PM
		       h/H---12小时制/24小时制，带前导0
		       i/s/u---分/秒/微秒
	     timestamp-----默认为time（）；也可省略
	  */

***获取/设置时区：
	date_default_timezone_get('')----查看默认时区
	date_default_timezone_set('PRC')----设置默认时区（中国时区：东八时）

11.28
******重点******switch语句注意事：
		switch（变量）{
			case  条件执行的结果：   //用于变量与结果比较（不能写比较的条件）
			echo  执行语句；     //变量与结果比较，成立的执行代码
		}
***显示所有报错信息：
	error_reporting(E_ALL)；

%%%%%    数组   %%%%%%------数组的索引与值使用“=>”连接，属于赋值关系。

****创建方式：
	1、$a=array（）;
	2、$a=[ ];
	@单元---逗号隔开的叫单元
	@键值对---由=>连接的部分，左为键（索引、下标），右为值--------单元由键值对组成。

***类型：1、数值型          56666
		@默认形式；索引默认从0开始；如果指定了（数值）索引，则后面的索引会在上一个基础上递增。

	2、字符串型        'gfught'
		@注意事项：强制转换,值会被后面覆盖---------1、如果索引是浮点数，则输出后向下取整。
					                       2、字符作为索引可以自由定义。
					                       3、布尔型中true->1;false->0;
						       4、索引区分大小写；
						       5、null被转化为空字串

***取值：
	根据数组索引来取值，有字符串的索引，也需要带引号----echo $a('新华')
	@注意事项-----如果数组中索引存在，则操作覆盖行为；如果索引不存在，则操作追加单元。
			例：$a['新华']=200
		     %特例----如果没有索引（$a[ ]=200），则以前面最大的索引递增，置于数组最后显示。

***删除---unset()：
	@数组单元的删除----- 自己不会出现数组重建的操作。如果需要重建索引，用array_values()函数----$b = array_values($a);
	@删除数组中的重复的单元---array_unique(变量)-----当几个数组元素的值相等时，只保留第一个元素，其他的重复元素被删除。返回的数组中键名不变。

******重点***PHP 数组排序函数：

	sort() - 对数组按字母/按数值进行升序排列
	rsort() - 对数组按字母/按数值进行降序排列
	asort() - 根据关联数组的数值，对数组进行升序排列
	ksort() - 根据关联数组的键（字母），对数组进行升序排列
	arsort() - 根据关联数组的值，对数组进行降序排列
	krsort() - 根据关联数组的键，对数组进行降序排列

***获取数组/数组的单元长度 - count() 函数
	@方括号和花括号可以互换使用来访问数组单元（例如 $array[42] 和 $array{42} 在上例中效果相同）。

***转化数组的键：
	语法：  array_change_key_case(array1,case);
		/*array1-----数组数据/数组变量   //$a.
		   case------CASE_LOWER - 默认值。将数组的键转换为小写字母。
			   CASE_UPPER - 将数组的键转换为大写字母。
*/


****PHP数组与JSON格式的转换！！！！！！！

	@@@@@网页出现乱码解决办法---强制改码--编码错误---在php文件开头输入header('Content-Type:text/html;charset=utf-8');
	@@@@@乱码的原因------编辑器的编码与浏览器展示的编码不一致，会导致乱码。（统一使用utf-8编码）
	@@@json字串使用注意事项---1、使用的编码就是utf-8。
				2、json字串中，索引使用双引号定义。
				3、浏览器出现null，不一定是编码错误，可能是json数据出现错误。
			      %%    4、JSON_UNESCAPED_UNICODE---是一个常量，作为数组转向json数据时，当做一个参数使用，防止编码过来后，出现乱码。-------					例：$a=json_encode($b,JSON_UNESCAPED_UNICODE)

***php提供了函数可以直接进行转换：----数值索引型转json后，是数组样式；字符串型转后，是对象样式。

	@@@读取资源------file_get_contents('文件位置')。
	
　　(1) json_encode : php数组 ---> json字符串  //以json形式编码，如果需要被使用，则需要把json编码后的内容json_encode（）输出。

　　(2) json_decode : json字符串 ---> php数组    //以json形式解码
	例子：$json_arr = array('WebName'=>'PHP网站开发教程网','WebSite'=>'http://www.jb51.net'); 
		$php_json = json_encode($json_arr);  //把php数组格式转换成 json 格式的数据
		echo $php_json; 
		$php_arr = json_decode($php_json,true/1);   //再把json格式的数据转换成php数组
		print_r($php_arr);

***数组的统计运算：
	加法----如果索引相同，后面的相同索引会被省略掉。
	求和-----array_sum(变量)；
	求数组单元长度-----count(变量)；
	求平均值----array_sum(变量)/(count(变量)-1);
	合并数组----array_merge(变量) ；
	声明------$a=[];$a[]="hdjhdjddj";-----输出为---array(0)  { [0]=>"hdjhdjddj" }

***数组与字符串之间的转化：-------$array=explode(separator,$string); ---字符串转数组    //separator--分隔符（字符串什么连接，就用什么分隔符）
			       $string=implode(glue,$array);----数组转字符串   //glue--胶合符连接（符号有多种）
***数组之间的比较：

	==          数组的键和值及单元数都相等时，为true；不考虑顺序。
	===       数组的键、值、顺序、类型均相同时，为true。

12.3
***数据的传输方式----常用于表单---action=‘目标地址’ method=‘get/post’
		@-----var_dump($_GET==$_get)----bool(false)变量区分大小写。
		@-----get方式传递的数据可以用$_GET和$_REQUEST接收。
			post------------------$_POST/$_FOLES和$_REQUEST接收
		
	1、GET----!!!!!!!!!---数据量小，传输数据时可以看到信息 ，会显示出来，可见也可改，不太安全。（数据大小超过2兆，则传不过去；否则需要修改数据库大小）
		注意：----1、？--在问号后面，是对受访页面的附加信息。
			2、URL键值对----GET的数据是以URL键值对的形式存在的，键值对之间用‘&’符连接。
						例：&isbd=1&f=8;
				@@注意-------1、键值对里不能再出现&
					         2、如值中有特殊字符（% ），需要对值进行转码。
						%%   GET中URL的转码
							1、解码----urldecode()
							2、编码----urlencode()
							3、数据的传输---不一定用表单传输。<a href="目标地址?user=abv&pass='123' "也可以（推荐）
							4、数据的接收---接收以GET方式传过来的值（数组）
	2、POST---数据量大，传输文件只能用post。post传的数据时作为header信息发送的，看不到，也改不了。
12.4
		
***文件域传输与接受
	1、文件域    input：file------例：<input  type="file" name="heading"/>
	2、传输    @1、表单中的method必需用post方式
		@2、传输时不能进行编码----enctype="multipart/form-data"
		@3、设置上传的文件类型---<input name="自选" type="file" accept="image/jpeg,image/png,image/gif等"
		@4、设置上传文件的最大大小----upload_max_filesize=（多少兆）m
	3、接收    -----使用$_FILES  来接收输入的文件（$_FILES是一个关于传入文件信息 二维数组）	
		@1、上传过之后变更目标位置-----例：move_uploaded_file($_FILES["heading"]["tmp_name"],'./upfiles/'.$_FILES["heading"]["name"]);
						/*  heading-----html中上传的input的name名字
						     tmp_name-----上传后的文件默认存放位置（但是在代码执行完后，默认位置中的文件会被立即删除，找不着）
						     './upfiles/'.------设置的新存放位置
						      "error"------其值为 0，没有错误发生，文件上传成功
							name---后缀名
						*/



12.6

********函数部分：
	1、trim（）----去除字符串首尾处的空白字符（或者其他字符）---可以自定义设置要去除的内容
			例：$str = "Hello World!";    echo trim($str,"Hed!");----llo Worl
	2、md5()-------把字符串进行加密（默认为32位加密方式）
			例： echo md5($a)
	3、str_pad()-------使用一个字符串填充字符串为指定长度
		语法：str_pad(需填充对象，长度，被填充对象 )
			例：echo str_pad($a,30,"+")  --------输出效果为被“+”补充到30位的字符串
	4、strrev() -------- 反转字符串（将字符串前后位置倒换）
			例： echo strrev($a);
	5、strtolower()-------将字符串转化为小写（直接加变量）
	6、strtoupper()-------将字符串转化为大写（直接加变量）
	7、str_split（）-------将字符串拆分切割成数组
		语法：var_dump(str_split($a,length))----length:默认为1；设置为多少，则数组每个单元中就有几个字符
	8、str_replace()------字符串中某部分替换
		语法：echo str_replace("被换字符串","所用替换字符串",变量名或者原字符串)


	9、str_repeat()-------重复一个字符串


		语法：echo str_repeat("需重复的内容"，重复的次数)
			例：echo str_repeat("+",10)   ----输出结果---"++++++++++"
	10、查找函数
		@strpos()------查找字符串第一次出现的位置
		@strrpos()-----查找指定字符串在目标字符串中最后一次出现的位置


12.7

BS软件框架

1、使用服务器域名访问----http://wanqi.club
2、域名+控制器访问----http://wanqi.club/index.html
3、域名+控制器访问+响应器访问-----http://wanqi.club/index-dft.html（".html"不写或者除“.php”以外其他的都能用）

----入口文件----Apache配置默认---index.php----是通过控制器和响应器来启动框架的入口
----MVC-----分离思想。通过MVC框架访问项目的URL形式
	@1、---/控制器-响应器/参数1-参数-2.后缀名
	@2、---定位到响应器
		--响应器就是控制器文件中的函数。加后缀找---index-dft.html
	@3、---默认的控制器--（index）和响应器---（dft）----控制器名字要与响应器中的函数名一致，如果不存在，查询报错
----/-----文件定位下的主目录


12.10
public function ip() {
    //strcasecmp 比较两个字符，不区分大小写。返回0，>0，<0。
    if(getenv('HTTP_CLIENT_IP') && strcasecmp(getenv('HTTP_CLIENT_IP'), 'unknown')) {
        $ip = getenv('HTTP_CLIENT_IP');
    } elseif(getenv('HTTP_X_FORWARDED_FOR') && strcasecmp(getenv('HTTP_X_FORWARDED_FOR'), 'unknown')) {
        $ip = getenv('HTTP_X_FORWARDED_FOR');
    } elseif(getenv('REMOTE_ADDR') && strcasecmp(getenv('REMOTE_ADDR'), 'unknown')) {
        $ip = getenv('REMOTE_ADDR');
    } elseif(isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], 'unknown')) {
        $ip = $_SERVER['REMOTE_ADDR'];
    }
    $res =  preg_match ( '/[\d\.]{7,15}/', $ip, $matches ) ? $matches [0] : '';
    echo $res;
    //dump(phpinfo());//所有PHP配置信息
}
12.11

***遍历数值数组：
	<?php
	$cars=array("Volvo","BMW","Toyota");
	$arrlength=count($cars);
​
	for($x=0;$x<$arrlength;$x++)
	{
	  echo $cars[$x];
 	 echo "<br />";
	}
	?>

*******遍历数组循环
	foreach()---------是php中专门为遍历数组和对象而设置的 
		语法：1、foreach( 待处理的数组或对象($age)  as    内部的单元的值($x)   ){     循环内部指针所以在层的处理代码         } 
			例：$age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");
			       foreach($age as $x)  {   var_dump($x)    }        ------输出为：35 37 43
				 /*        常用          */
		          2、foreach( 待处理的数组或对象($age)  as    单元的索引 =>单元的值  ){     循环内部指针所以在层的处理代码         }
			例：$age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43")；
				foreach($age as $x=>$x_value)    { 
				echo $x;
				echo $x_value; 
				} 

	控制关键词----break-----当前循环被终止
		----continue------跳过当前循环（配合查找函数---strpos($a,'查找对象')-------）
12.12

******this方法
	在php中可在一个函数中调用另外一个函数的数据，       语法：$arr=$this->调用的函数名（）
******对象、数组区别
	1、数组有长度，对象没有；
		定义：类与对象使用->
	2、创建方式
		数组----通过arrar()或{}来创建
		对象----通过实例化   一个php基类来创建的一个对象
	3、调取方式
		数组------使用   [索引]
			例：$a["name"]["age"]
		对象------使用   ->    
			例：$a->name->age
********引入外部新文件，引入后作为本体的一部分内容使用。--------数据与视图（tpl文件夹，html文件放置位置）的组合
	——重点——在html中使用视图遍历数组步骤
		<?php  foreach ($data as $x ) {  ?>
		<?php           }  ?>

	          例： <?php foreach($qu as $x){ ?>
            			<li> 
           			 <center>
              			         <ol>
                   			 <img src="/xinhua/img/<?=$x->id;?>.png" width="98%"/>
                    			<h4><?=$x->nick;?></h4>
                    			<span><?=$x->slogan;?></span>
                    			<h5><?=$x->click;?></h5>
                    			<div id="dz">
                    			    <button>点赞</button> 
                    			</div>        
              			        </ol>
         			</center>
            			</li>
        		<?php }?>
	



	include()/include_once() -------后跟被引入资源的地址，可以是相对的或者绝对的地址，地址必须是本地的file文件系统，不可以引用网上的外部资源或者http资源。
	include_once()--------会检测资源是否被引入过，引入过后，则不会引入；。
	require、require_once--------------使用方法类上，
           @  file_get_contents('数据位置'）----抓取数据，读取数据
		@区别：	1、include()/include_once() -------如果文件资源不存在，不会影响后面代码的执行
			     require、require_once-----检测资源是否出错；如果错误，会直接影响后面代码的执行，阻止执行。
			2、_once() --------会检测资源是否被引入过，引入过后，则不会引入；未被引入才会引入该资源。
	          ----屏蔽错误显示---在前面加“@”符号-----单纯屏蔽，但还是有错误，在错误日志里会记录。
	错误日志：logs文件夹（不一定，）
		----FR----是一个常量，可以取到项目根目录
		----APP_NAME-----常量，定位到项目目录
12.17
*****php函数
	function  函数名（参数---可多个，且用逗号隔开）{     执行后的函数要return返回     }；
		注意：函数名定义时，只能以字母或者下划线开头
	echo/var_dump(函数类型不确定时使用)   函数名（参数）；
	 	注意：1、函数名不能重复，否则会报错（重复错误）；
		          2、函数名不区分大小写
		          3、exit也是一个函数，但是阻止不了函数的调用，代码会先被加载进内存处理数据，在需要时被调用，所以，函数可以在任意位置被调用           -------------函数是条狗，哪里需要哪里吼！
		          4、函数的参数(argument)---不能是常量
				@1-----形式参数-----函数在定义时，自己随便定义的参数（也是变量，名称自己随便定）
				@2-----实际参数-----函数执行时，传的参数，且是php中存在的变量
					注意------1、实际参数和形式参数要一一对应，位置对应
						2、形式参数默认值，可以设置默认参数；当不传入参数时，则使用默认值；实际参数传入可以省略，则使用传入参数。
					例：function moren($mr='array_values'){
   
						$arr1=$mr($shuzu);
  var_dump($arr1);

						}
    moren();
						3、如果形式参数是默认值，之后参数如果存在没有默认值。则该形式参数也不能省略
		          5、函数的返回值
				函数的返回值是将函数处理的结果（任意类型）进行返回。-----return   结果
					注意------1、在函数内部，return出现后，结果只执行返回第一次且执行结束。
						2、return不是必须的，也可以不返回
				return与exit之间的区别：
					----return会调用所有静态变量的析构函数，完成退栈； 而exit（）不会。
12.18
*****引用----把不同的变量 定位到同一个值。
	用处：1、在程序中对自身进行修改
	          2、函数的引用传值。
*****常量---只能是标量
	语法：      1、const  常量名字   =  值；命名时，只能以字母及下划线开头，不能用数字或特殊字符及$,还不可以使用内置的常量
		2、define( "name"，value，可选参数) 只能用该函数定义
	·	   参数------1、首个参数定义常量的名称
		   	   2、第二个参数定义常量的值
			   3、可选的第三个参数规定常量名是否对大小写不敏感。默认是 false。默认区分大小写
		区别-------const  定义的常量，其值只能是一个确定的值（只能是标量值（bool、int、string、float），不能是数组），不能是变量（可以用以后的类的属性中）；不能在任何的函数中定义，不成功。
			define  定义的常量，其值两者都可以。
	常量和变量有如下不同： 
		◦ 常量前面没有美元符号（$）；  
		◦ 常量只能用 define() 函数定义，而不能通过赋值语句；  
		◦ 常量可以不用理会变量的作用域而在任何地方定义和访问；  
		◦ 常量只能定义一次，一旦定义就不能被重新定义或者取消定义且不能被删除；  
		◦ 常量的值只能是标量。
		。常量不能被 {  } 和“ ”来解析
		。常量不能用isset来检测是否存在；isset（）中只能是带$的变量
	-----检测常量------defined（'常量的名称'）----括号内不是常量本身，而是常量的名称
12.19
****作用域
	——量值的有效范围
	1、什么时候创建作用域？
		——一般使用  { }  开创新的作用域，PHP中函数的 { } 能开创新的作用域，相对外界封闭。
	2、对什么产生限制？
		注意：1、常量是一个全局的作用域。
		          2、变量是一个局部作用域，只能在自己作用范围内使用。（函数内部）
		        #3、变量的作用域包含include（）
		###   4、突破作用域
			——1、预定义变量可以穿透
			       2、关键词-global   变量（公共范围的变量） ---用在函数中进行调用，函数内改变该变量后，全局也会变；如果外界全局变量不存在，也可以在函数内定义一个变量，则全局变量中也会被定义
				----例：1、global  $a;
					2、function show(){ global  ('$a')；执行代码    }

			       3、超全局变量 （数组） ----$GLOBALS['变量']
				也是可以改变全局变量的值。
				-----例：function show(){ $GLOBALS [ 'a' ]  ；var_dump ( $GLOBALS [ 'a' ] )   }

12.20
****MySQL数据库
	1、连接到MySQL服务器
	        1->使用front或者heidisql客户端连接到数据库
	        2->使用cmd
		切换盘符：  D:+回车
		进入目录：  cd 目录
		查看内容：dir  目录
		返回上一步： cd ..
	        3->连接到mysql
		进入---执行mysql：   mysql  -u (用户名：指user)  -h  (主机名：指host)  -p  (小写是密码，大写是端口号)
		退出---exit；或者quit：
	        4、mysqli_connect (主机名或者IP，服务器用户名，密码，默认使用数据库，端口号，规定socket或要使用的已命名pipe. )
		       例：mysqli_connect (host,username,password,dbname,port,socket)
	     ￥5、服务器进数据库
	2、查看数据库信息----status；
	3、指令分隔符
		---show  databases;  ----显示所有库
		---use   数据库名称；----使用数据库
	    	---show  tables；      ----显示当前库下的所有表
	4、数据存放位置   -------mysql\user
	5、刷新授权表   ----flush privileges;
	6、查看数据库编码-----mysql> show variables like 'char%';
￥设置环境变量：C:
****数据表  ---类型/数值
	1、表中的行->记录；表中的列->字段
	2、表中数值：数值型、字符串型
	3、创建表  ----‘t_’开头
	4、查看表内容----describe   表名
	5、字段属性  ---1、字符型：字符型的长度，设置多少就只能存储多少位    例：varchar(5)-----5指输入的值能存储多少位。
		         2、数值型：长度设置多少，补零到多少位。       例：tinyint(5)-----5指不足5位，补零处理。
			浮点型：四舍六入五考虑，五后有数则进一（除零），五后无数视奇偶，五前为偶则舍去，五前为奇则进一。
	7、同样的值数量 ------COUNT(字段名)    配合分组子句使用
			
****数据库命令
	数据库的查询（配合连接数据库函数使用）
		----mysqli_query(数据库名，要查询字符串，常量（默认为MYSQLI_STORE_RESULT、MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个））
	关闭先前打开的数据库连接（php脚本操作）-------mysqli_close（数据库名字）
	创建数据库-----1、cdm中创建------create   数据库名        例：mysql> create database RUNOOB;
		        2、mysqladmin 创建数据库      例：mysqladmin -u root -p create RUNOOB（登录成功后即创建）
		        3、 PHP脚本 创建数据库 
			例：<?php
				$dbhost = 'localhost:3306';  // mysql服务器主机地址
				$dbuser = 'root';            // mysql用户名
				$dbpass = '123456';          // mysql用户名密码
				$conn = mysqli_connect($dbhost, $dbuser, $dbpass);
				if(! $conn )
				{
 				 die('连接错误: ' . mysqli_error($conn));
				}
				echo '连接成功<br />';
				$sql = 'CREATE DATABASE RUNOOB';
				$retval = mysqli_query($conn,$sql );
				if(! $retval )
				{
 				   die('创建数据库失败: ' . mysqli_error($conn));
				}
				echo "数据库 RUNOOB 创建成功\n";
				mysqli_close($conn);
				?>
			
	删除数据库-----1、cdm中创建------drop   数据库名        例：mysql> drop database RUNOOB;
		        2、mysqladmin 创建数据库      例：mysqladmin -u root -p drop RUNOOB（登录成功后即创建）
		        3、 PHP脚本 创建数据库 	
			例：<?php
				$dbhost = 'localhost:3306';  // mysql服务器主机地址
				$dbuser = 'root';            // mysql用户名
				$dbpass = '123456';          // mysql用户名密码
				$conn = mysqli_connect($dbhost, $dbuser, $dbpass);
				if(! $conn )
				{
 				 die('连接错误: ' . mysqli_error($conn));
				}
				echo '连接成功<br />';
				$sql = 'DROP DATABASE RUNOOB';
				$retval = mysqli_query($conn,$sql );
				if(! $retval )
				{
 				   die('创建数据库失败: ' . mysqli_error($conn));
				}
				echo "数据库 RUNOOB 删除成功\n";
				mysqli_close($conn);
				?>
	使用数据库-----1、cmd命令 ------use   数据库名
		        2、PHP脚本  -----mysqli_select_db('总数据库','要使用数据库');
char----定长（）
varchar----可变长度
text-----不可以指定长度，指定也没用（储存段落）
****数据类型
	字符串类型--
		类型		大小			用途
		CHAR		0-255字节		定长字符串
		VARCHAR	0-65535 字节		变长字符串
		TINYBLOB	0-255字节		不超过 255 个字符的二进制字符串
		TINYTEXT		0-255字节		短文本字符串
		BLOB		0-65 535字节		二进制形式的长文本数据
		TEXT		0-65 535字节		长文本数据
		MEDIUMBLOB	0-16 777 215字节		二进制形式的中等长度文本数据
		MEDIUMTEXT	0-16 777 215字节		中等长度文本数据
		LONGBLOB	0-4 294 967 295字节	二进制形式的极大文本数据
		LONGTEXT	0-4 294 967 295字节	极大文本数据

	日期和时间类型--	
		类型		大小
				(字节)		范围				格式			用途
		DATE		3	1000-01-01/9999-12-31			YYYY-MM-DD		日期值
		TIME		3	'-838:59:59'/'838:59:59'			HH:MM:SS		时间值或持续时间
		YEAR		1	1901/2155	YYYY			年份值
		DATETIME	8	1000-01-01 00:00:00/9999-12-31 23:59:59	YYYY-MM-DD HH:MM:SS	混合日期和时间值
		TIMESTAMP	4	1970-01-01 00:00:00/2038			YYYYMMDD HHMMSS	混合日期和时间值，时间戳
					结束时间是第 2147483647 秒，
					北京时间 2038-1-19 11:14:07，
					格林尼治时间 2038年1月19日 凌晨 03:14:07
	数值类型--
		类型		大小			范围（有符号）				     范围（无符号）			用途
		TINYINT		1 字节			(-128，127)				     (0，255)			小整数值
		SMALLINT	2 字节			(-32 768，32 767)				     (0，65 535)			大整数值
		MEDIUMINT	3 字节			(-8 388 608，8 388 607)			     (0，16 777 215)			大整数值
		INT或INTEGER	4 字节			(-2 147 483 648，2 147 483 647)		     (0，4 294 967 295)		大整数值

		BIGINT	8 字节	(-9 233 372 036 854 775 808，
				9 223 372 036 854 775 807)     					     (0，18 446 744 073 709 551 615)	极大整数值
		FLOAT	4 字节	(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，
				(1.175 494 351 E-38，3.402 823 466 351 E+38)				      0，(1.175 494 351 E-38，3.402 823 466 E+38)	单精度、浮点数值
		DOUBLE	8 字节	(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，
				0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)	      0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)	双精度、浮点数值
		DECIMAL	对DECIMAL(M,D) ，如果M>D，为M+2否则为D+2		依赖于M和D的值		      依赖于M和D的值	小数值

	
***数据索引-----一种算法
	类型：1、主键（PRIMARY）    ------唯一性，不能有重复。
	          2、唯一性键值 （UNIQUE）  	------记录不能有重复的值、不能为空。
	          3、普通索引   		------
	          4、组合型索引	------组合在一起的对应值，不能重复（唯一索引的组合、主键的组合）

12.25
****mysql语句
	---定（DDL）、查(DQL)、操(DML)（增、删、改、查）、控(DCL)
	       ------1、定义语句------CREAT(增) DROP、 TRUNCATE（删）
		2、查询语句
			1、语法：
			            1、列出字段名的结果
				SELECT	字段名称1,字段2。。。。from   表名
			            2、列出所有字段的结果
				mysql>select *
			                    ->from
				    ->;
			    *-----通配符，代表全部内容，从某表查询全部内容。
			    Ctrl+c -----终止cmd代码执行
          ￥注意：1、语句关键词、表的名称、库名、字段名称都不区分大小写。
	       2、如果子句中需要使用系统关键词（如order、select等）作为子句内容参数时，需要把作为参数的关键词加上  ``  （1左边的键）包括着
	       3、在跨库操作时，库与表之间必须用 ' . '连接，不跨库时可省略 ; 表与字段之间也是用 ‘.’连接。
		例：select  xiaoma.t_lishi  from
			2、where子句   -----条件语句（）
					比较运算：>  <  !=  <>  <=  >=
					逻辑运算：与、或、非（and、or、not）
				select * from 表名  where   字段1<值（条件句）；
					注意：1、where 0 和where 1 类上，条件成立则输出；不成立则不执行。
				￥补充-----1、条件取中间范围时用between （包括两边的值）
							例：select * from 表名 where id  between 1010 and 1050；
					  2、not   反向（相当于！=）
							例：select * from 表名 where not id=1000；
						注意：如果有多个限制条件时，用括号包括再反向
							例：select * from 表名 where not （id=1000 or id=1010）；
					3、in  枚举   -----输出指定字段中的内容，指定多少输出多少
							例：select * from 表名 where 字段名  in（值,1455,1545。。。）；
						反向----	例：select * from 表名 where 字段名 not   in（值,1455,1545。。。）；
					4、like  模糊查找
						a、通配符---%---指代任意内容、任意长度。
							例：select * from 表名 where 字段名  like "%关键词%"
						注意：关键词左右都有%时，指查询字段中含有该关键词的记录；如果前面没有，则查找以关键词开头的记录；
							如果后面没有，则查找以关键词结尾的记录。
					5、null  
						语法：select * from 表名 where（not）isnull (字段名)；
			3、order子句   -----排序语句
				select * from 表名  order by  字段名称1  排序方式1（desc(倒序大到小)/asc（正序）），字段名称2  排序方式2。。。。；
					注意：第一个字段为主排序，后面的都是在第一个基础上进行。
			4、group子句  ---- 分组语句
				select * from 表名  group by   字段名称；
					注意：分组是将相同的数据组合成“一个组”（去除重复，不是一个值）
			5、limit子句  ------限制子句
				select * from 表名  limit   显示条数；
				select * from 表名  limit   起始值，显示条数；
			6、聚合函数
				------ max(最大)    min(最小)   avg(平均值)   count（统计数值，找总长度）
				例：select  id，聚合函数名（price） from  表名 where 条件句
					注意：如果聚合函数跟分组子句联合时，则函数是对组内的数据进行操作的（如求和）
			7、别名
				---用途---1、取代函数复杂运算后生成的字段名
					2、保护原有数据
						例：select     字段  或者  表达式    as  别名   from  表名 
		3、操作语句  -----CURD（创建、更新、读取、删除）			
			1、Create创建 插入语句
			        语法1：
				insert into 表名称 (字段1,字段2,字段3,...)values(值1,值2,值3,...);
					示例：insert into 表名称 (name,phone)values('校长','');
				insert into 表名称 (字段1,字段2,字段3,...)values(值1,值2,值3,...)
				(值1,值2,值3,...);

			        语法2:
				insert into 表名称 set 字段1=值1,字段2=值1,....
				示例：
				insert into 表名称 set id=583,phone='',....


			2、Update 更新语句
			         语法：
				update 表名 set 字段1=值1 where 子句
	   			     示例：updata cs_2 set phone=99999 where id=583;	
			         注意：
				1.更新语句返回受更新影响的行数
				2.返回的影响行数是0：
					1.更新的行不存在
					2.未更新任何值（新旧值一样）
		      	         补充：
				￥replace 插入或更新数据
				￥如果传入的数据有该主键名则执行此主键行的更新
				￥如果没有该主键则执行插入操作
				示例：replace into cs_2 set id=585,name='小张3',phone='45456';

			3、Delete 删除语句
				1、语法：
				         delete from 表名 where子句
					示例：delete from cs_2 where id<100;


				2、表间的关联-----用 ‘.’连接表名与字段名
					示例：select t_user.id,t_user.
		4、 控制语句
*
****删除表
	 delete，drop，truncate 都有删除表的作用，区别在于：

 1、delete 和 truncate 仅仅删除表数据，drop 连表数据和表结构一起删除，打个比方，delete 是单杀，truncate 是团灭，drop 是把电脑摔了。
 2、delete 是 DML 语句，操作完以后如果没有不想提交事务还可以回滚，truncate 和 drop 是 DDL 语句，操作完马上生效，不能回滚，
	打个比方，delete 是发微信说分手，后悔还可以撤回，truncate 和 drop 是直接扇耳光说滚，不能反悔。
 3、执行的速度上，drop>truncate>delete，打个比方，drop 是神舟火箭，truncate 是和谐号动车，delete 是自行车
***子句联合顺序
	基础查询>where>group>order>limit

12.28
 
****PDO -----php数据对象   (php --data--object)
	SQL语句顺序：连接->执行（执行预处理语句->绑定数据到预处理语句->执行后并返回数据）->返回结果
		
	                1、连接数据库
		    const  DB_DNS='mysql:host=主机名  ;  dbname=数据库名 ;  port=3306 ；' ;    //值前一定不能有空格
		    const  DB_use='用户名';
		    const  DB_pwd='密码 ';
		   
	                2、执行数据库（防止破坏数据库）
 		    $pdo=new  pdo (DB_DNS,DB_use,DB_pwd)   //取得初始化pdo
			注意：1、预处理语句中的占位符-----' ? '  或者  '：点位名称 '
					？ -------位置号，从1开始。
						$sql = 'select * from t_lishi where m=? and d=? ';

					： -------索引占位符。占位事语法：     ：key1, ：key2   ....
						例：$sql = 'select * from t_lishi where m=:m   and   d=:d  ';
							$arr=[ ':m' =>1010, ' :d ' =>15]

			          2、执行预处理语句
				例：$a='select * from t_lishi where  name=?'；
				       $stmt=$pdo->prepare($a);
			          3、绑定数据（有几个占位符就绑定几个,只能占数值）
				例：$stmt->bindValue(a1,b1); ----------a指第几个占位符，b指给占位符赋值
				       $stmt->bindValue(a2,b2); 
			          4、返回数据
				例：$stmt->execute();  //相当于把上面的操作放在一起执行
	                3、返回结果
		     var_dump($stmt->fetchAll ( ) ); -----查询语句的返回方式
		     var_dump($stmt->rowCount ( ) );  ------更新语句的返回方式
                          针对查询语句   -query（）；
                          针对操作语句   -exec（）；
	PDO   预定义常量：
		fetchAll ( PDO::FETCH_ASSOC ) ----以字段名为索引返回数组
			PDO::FETCH_NUM     ----以数值为索引返回，从0开始
			PDO::FETCH_BOTH    ----以两种为索引返回，字段名和数值型。
****分页算法：
	页码起始行数 = limit ( 当前页码数-1 ) *  每页显示行数 ， 每页显示行数
*******pdo错误显示
	$pdo->setAttribute(PDO::ATTR_ERRMODE，PDO::ERRMODE_WARNING)    //强制显示错误报告。---语法：属性，属性值
		PDO::ERRMODE_WARNING ---------	


**@@@**错误日志  12.18
	1、    function abc(){
     return "abc";
     }
     $abc='abc';
	echo $abc();
		-----这样可以，$abc会先被赋值成abc，加上（）则变成上面的abc（）函数执行。
	2、代码加载顺序
		----从上至下，从左到右，预加载所有代码，预先载入函数

19.2.18
  	类与对象
一、基础
	1、类——类是具有相同属性和服务的一组对象的集合。它为属于该类的所有对象提供了统一的抽象描述，他具有统领性，一动则全动。
	2、对象——一个对象由一组属性和对这组属性进行操作的一组服务组成。每个对象就是一个独立的个体，跟同类的其他对象互不影响，统一受类的影响。
	3、关系——类的实例化是对象，对象的抽象化就是类。如果改变类中的某一个对象的属性，则该类下的其他对象不会跟着改变，相对独立。
			相反，如果改变类的属性或者服务，则该类下的所有对象都会跟着做同样的改变。
	4、如何定义类？	--class  类名 { 类的成员属性（属性，也是在类内部是具有全局性的变量）	类的功能（函数（推荐使用修饰词） | | 方法） }  
			例：class lei 
				{
					//public 属性修饰词   一定不可以省略
					public $ming;

					//成员方法
					pubic  function say ( )
					 { 	//方法
	      				  echo "这个人在说话";
	   				 }
					pubic  function run ( )
					 { 	//方法
	      				  echo "这个人在说话";
	   				 }
				}
			      $p=new lei();	
			成员方法使用注意——1、使用->调用
					  2、$this  是类被实例化后的对象
					  3、成员属性在类的内部的调用$this->属性的名称（不需要加$）
						例：$this->ming;
					  4、在类的外部，调用另外一个方法------$this->另外一个方法名（）
						例：pubic  function say ( )
							 { 	//方法
	      				 		 echo "这个人在说话".$this->run()
	   						 }	
	5、如何实例化对象？     --使用new关键词，一个类可以实例化多个相同的对象      例：$对象名称 = new 　类名称（）;
       说明：1、类不可以重名
	2、不区分大小写
	3、类的实例化可以在任何位置调用
	4、实例化对象时，$对象名称 = new 　类名称（），后的（）可加可不加，但要注意场合。

      PHP命名空间     ---namespace--是程序虚拟出来的的空间，用于划分不同位置的数据（常量、函数、和类），解决的是重名问题。
	——定义： namespace  空间名称；

      注意：1、变量不在任何的空间内，需要取回时，直接拿来用。
	2、任何的属性都是有空间的，如果不设置，则默认为   根空间 \（公共空间）
***********3、空间中属性的调取：使用  绝对空间   一定不会错，尽量不要用相对空间，太局限。
	4、在命名空间时，前面不能加  \         例：namespace   \grade1·
	5、空间命名时，只能以字母、下划线开头。
	6、第一个空间命名必须在第一行，空间命名前不能有任何的代码。
	7、一个文件中可以定义多个空间，空间也可以重名，说明在同一空间下，使用属性时，直接使用就行；但是，不同空间中的元素处理，必须使用空间定位才能访问到。
	8、空间别名——use  空间或者子空间  as 空间别名        例：use  \ctl\db4  as  db;
二、类的特性
	1、封装
	       public      公有          在任意位置均可自由访问
	       private     私有          只可以在当前类的内部访问
	       protect    受保护的    只在当前类和子类中可以访问
	——通过这些修饰词对成员进行对应保护。
	2、继承
	       ——继承别人的类（派生类）就是对已有的类进行一个复用的使用，集成之后可以自动拥有被继承的类（基类）的成员属性和成员方法。一个父类可以被多个子类继承；继承就有传递性，子类还可以继承被继承。
		1、语法:     class    子类的名称     extends    父类的名称
		2、访问修饰符在继承里的权限问题
				类内部	类外部	继承里面
		public		可以	可以	可以
		protected		可以	不可以	可以
		private		可以	不可以	不可以
		3、继承修饰符权限问题11:27 2019/2/21
			权限排列：     public  >  protected  >  private
				——子类的权限范围必须要比父类的大或者相等。
		         ——当父类是public的时候，子类只能是public
			当父类是protected的时候，子类可以是public,protected
			当父类是private的时候，子类可以是public,protected,private
			所有的魔术方法都会被继承并都可以被重载
		4、类在继承时，继承父类的所有内容，子类和父类属性相同、名字相同。
		5、覆盖：权限、属性名、方法名相同时，父类的属性和方法都会被子类覆盖。
		6、子类中取父类中的方法（不是重写，而是扩展）	parent : : 父类的方法名称（有参数写参数）——在父类方法下写，而且只能取得方法
			注意：      self——针对当前类操作
				parent——针对父类操作
				$this——当前实例化对象之后
		7、常量属性    -----只能用const  定义，放在类的内部，就是类的常量属性，必须有值且不能更改		例：const   name=' 你好！';
		           ——取得类中的常量，不需要实例化类，可直接取。
				1、在类的内部可以用  self : : name  或者   类名 : : name
				2、常量属性在继承时，同成员属性特征。
				3、常量属性的覆盖：在子类中使用与父类相同的常量名称，即可覆盖并不是更改。
				4、在继承中：如果要访问父类的常量属性用 parent : : 常量名称；要访问子类时，用self : : 常量名称。
		8、静态属性   -------1、声明——public  static  属性=‘属性值’。
				2、性质——具有变量属性的可变性、常量属性的无需实例化可调用性。
				3、使用——调用时，需要加$符号,也可以改变值	（self、parent、类名调用）           例：类名：：静态常量=‘值’       che::$wheel='值';
		9、静态方法   -------public static function  方法名（）{   }
				     —注意：不需要实例化、方法内不能使用this，只能使用self或者parent调用常量/静态常量。
	      注意：private——在继承时，不可以被继承。只可以在本类中使用，外界取不到，也不能更改覆盖。
		方法覆盖时，父类中如果有参数，则子类中也得有相同数量的参数，否则报错！

		10、类锁——可以用于类和方法----关键词final
			---类被加锁时则不能被继承；方法被加锁时则不能被修改
		11、构造函数——只要当类被实例化时，被第一个执行的函数-------function __constructs(){ }
		12、抽象类——关键词  abstract,一种开发规范，约定你需要完善的方法，不需要具体的内容，只需要一个名称即可。
				语法：abstract   public  function   name（）；
			      注意：抽象方法必须被重写、含抽象方法的类必须带抽象关键词  abstract 定义；有抽象类，不一定有抽象方法。
				补充内容继承时，子类需要重新对抽象方法调用，同时进行增添内容后执行。
		13、接口类——关键词interface ;在继承的基础上，配合include  加载函数,不同的类，共同的功能，如果引入接口后，必须要把接口的内容完善。	
				inplements ——实现效果接口		例：class gongjiaoche extends \lib\chuxing  inplements  xiaoguo{  };
			      注意：定义接口时，不需要使用class关键词，      例：interface  go{  };
				
	3、多肽——在继承的基础上，配合include  加载函数，不同的类，执行相同的抽象类及方法，实现不同的效果。	
注意：每个类必须单独成文件。
	

			









作业：
数组比较运算、加法运算、对象、
数组与字串、数组的运用、交互myinf.html、get_myinf.php
<a href="目标地址?user=abv&pass='123'  怎么
apache重写模块-----rewrite_module   要开启

取访客IP、域名、端口号、服务器IP、协议名称、URL中除了域名之后的所有内容、URL中GET参数中的键值对的字串
php循环（foreach、do  while）